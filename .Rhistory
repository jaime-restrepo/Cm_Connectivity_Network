left_join(., cropped_metasites)
filt <- edges %>%
dplyr::select(!MetaUniqueID) %>%
pivot_wider(names_from = "Meta", values_from = c("MeanLat", "MeanLon")) %>%
filter(((-180 < MeanLon_MetaUniqueID_from) & (MeanLon_MetaUniqueID_from < 0)) & ((180 > MeanLon_MetaUniqueID_to) & (MeanLon_MetaUniqueID_to > 0))) %>%
filter(!ID %in% c(180)) # HACK. manually removed 180 because my brain is not working...
filt_trial1 <- filt %>%
dplyr::mutate(MeanLon_MetaUniqueID_to = -179.99) %>%
pivot_longer(cols = c("MeanLon_MetaUniqueID_from", "MeanLon_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLon") %>%
select(ID, MeanLon)
filt_trial2 <- filt %>%
pivot_longer(cols = c("MeanLat_MetaUniqueID_from", "MeanLat_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLat") %>%
select(MeanLat)
filt_trial3 <- filt %>%
dplyr::mutate(MeanLon_MetaUniqueID_from = 179.99) %>%
pivot_longer(cols = c("MeanLon_MetaUniqueID_from", "MeanLon_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLon") %>%
dplyr::mutate(ID = 500 + ID) %>% #another hack to change the IDs...
select(ID, MeanLon)
filt_trial4 <- filt %>%
pivot_longer(cols = c("MeanLat_MetaUniqueID_from", "MeanLat_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLat") %>%
select(MeanLat)
filt_trial_a <- bind_cols(filt_trial1, filt_trial2)
filt_trial_b <- bind_cols(filt_trial3, filt_trial4)
filt_trial <- bind_rows(filt_trial_a, filt_trial_b)
filt_string <- unique(filt$ID)
edges_sf <- edges %>%
filter(!ID %in% filt_string) %>%
dplyr::select(-Meta, -MetaUniqueID) %>%
bind_rows(., filt_trial) %>%
st_as_sf(coords = c("MeanLon", "MeanLat")) %>%
group_by(ID) %>%
summarize(ID = unique(ID)) %>%
#st_union() %>%
st_cast("LINESTRING")
st_crs(edges_sf) <- longlat
land <- rnaturalearth::ne_countries(scale = 'large', returnclass = 'sf') %>%
st_transform(crs = longlat)
RMU <- st_read("CM_RMU_20231020.shp")
plot(RMU)
RMU$species
RMU_Cm <- RMU [, 2,14]
RMU_Cm
View(RMU_Cm)
colors <- c("NES" = "#e3e418ff",
"BRE" = "#e3e418ff",
"FEE" = "#21908cff",
"STO" = "#21908cff",
"MIG" = "#253494",
"OBS" = "#253494",
"HOM" = "#253494")
mapcoords <- coord_fixed(xlim = c(-110, -60), ylim = c(0, 80))
Global_plot <- ggplot() +
geom_sf(data = land, fill = "white") +
geom_sf(data = RMU_Cm, fill = "#2a788eff", alpha = 0.18) +
#geom_sf(data = nodes_sf, aes(color = type),  alpha = 0.6 , size = 2.6) +
#scale_color_manual(name = "Node type", values = colors) +
#guides(color = "none", size = "none") +
geom_sf(data = buffer_sf, aes(fill = type), alpha = 0.8, color = "black", size = 0.1) +
scale_fill_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
#geom_sf(data = edges_sf, linewidth = 0.3) +
theme(panel.background = element_rect(fill = "grey"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank() ,
legend.position = "none" ) #c(0.08, 0.25),
Global_plot
Global_plot <- ggplot() +
geom_sf(data = land, fill = "white") +
geom_sf(data = RMU_Cm, fill = "#2a788eff", alpha = 0.18) +
geom_sf(data = nodes_sf, aes(color = type),  alpha = 0.6 , size = 2.6) +
scale_color_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
geom_sf(data = buffer_sf, aes(fill = type), alpha = 0.8, color = "black", size = 0.1) +
scale_fill_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
#geom_sf(data = edges_sf, linewidth = 0.3) +
theme(panel.background = element_rect(fill = "grey"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank() ,
legend.position = "none" ) #c(0.08, 0.25),
Global_plot
Map <- ne_countries(scale = "large",type = 'countries', returnclass = "sf")
library(rnaturalearth,rnaturalearthdata)
library("sf")
Map <- ne_countries(scale = "large",type = 'countries', returnclass = "sf")
Map_Car <- st_crop(Map , xmin = -100, xmax = -50, ymin = 5, ymax = 38)
car <- subset(nodes_sf, Basin == "ATL")
buffer_car <- subset(buffer_sf, Basin == "ATL")
crop_buffer_car <- st_crop(buffer_car , xmin = -100, xmax = -50, ymin = 5, ymax = 38)
car_RMU_Cm <- st_crop(RMU_Cm ,xmin = -100, xmax = -50, ymin = 5, ymax = 38)
crop_edges_sf <- st_crop(edges_sf , xmin = -100, xmax = -50, ymin = 5, ymax = 38)
Caribbean_plot <- ggplot() +
geom_sf(data = Map_Car, fill = "white") +
geom_sf(data = car_RMU_Cm, fill = "#2a788eff", alpha = 0.18) +
#geom_sf(data = car, aes(color = type),  alpha = 0.6 , size = 2.6) +
#scale_color_manual(name = "Node type", values = colors) +
#guides(color = "none", size = "none") +
geom_sf(data = crop_buffer_car, aes(fill = type), alpha = 0.18, color = "black", size = 0.1) +
scale_fill_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
geom_sf(data = crop_edges_sf, linewidth = 0.8) +
theme(panel.background = element_rect(fill = "grey"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank() ,
legend.position = "none", axis.title.x = element_blank(), axis.text.x = element_blank(),
axis.ticks.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(),
axis.ticks.y = element_blank())  #c(0.08, 0.25),
Map_Car <- st_crop(Map , xmin = -100, xmax = -50, ymin = 5, ymax = 38)
## Wider Caribbean
regions <- c("S-ATL","N-ATL")
nodes$inregion <- lapply(nodes$RefOcean, function (i) any(i %in% regions))
longlat <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0" # set CRS
#Specify species
## ORIGINAL spp <- "THMAC"
spp <- "CHMY"
metasitesfile <- paste("C:/LEGOLAS/R/Ch1_Lit. Rev/Aggregation/",spp, "_metasites_testing_dcd.csv", sep="")
metaroutesfile <- paste("C:/LEGOLAS/R/Ch1_Lit. Rev/Aggregation/",spp, "_metaroutes_testing_dcd.csv", sep="")
# load georeferenced sites & routes
metasites <-  read.csv(metasitesfile, header = T, sep = ",", dec = ".", stringsAsFactors = F)
metaroutes <- read.csv(metaroutesfile, header=T, sep = ",", dec = ".", stringsAsFactors = F)
metasites <- read_csv(here(paste0(spp, "_metasites_testing_dcd.csv")))
metaroutes  <- read_csv(here(paste0(spp, "_metaroutes_testing_dcd.csv")))
sites <- read_csv(here(paste0("georeferenced_sites_CHMY_draft.csv")))
species <- metasites$CommonName[1]
activitytypes <- c("SPA", "NES", "BRE", "FEE", "STA", "STO",  "MIG", "WIN", "NBR", "OBS", "HOM")
fullactivity <- c("Spawning", "Nesting", "Breeding", "Feeding/Foraging", "Staging", "Stopover",  "Migrating", "Wintering", "Nonbreeding", "Observations", "Homerange")
## Usng the Metasites' file
nodes <- with(metasites, data.frame(id=MetaUniqueID, lon=MeanLon, lat=MeanLat, radius=MaxRadius, type = factor(BehaviorForSymbology, levels = activitytypes) , activities = SiteType, num = MinNumIndividuals, SiteLocation = MetaUniqueID, Basin = Basin))
# Create nodes sf object
nodes_sf <- nodes %>%
st_as_sf(coords = c("lon", "lat"))
# Create buffer sf object
buffer_sf <- st_buffer(nodes_sf, dist = nodes_sf$radius)
st_crs(buffer_sf) <- longlat
st_crs(nodes_sf) <- longlat
# Create edges
cropped_metasites <- metasites %>%
dplyr::select(MetaUniqueID, MeanLat, MeanLon)
edges <- metaroutes %>%
dplyr::mutate(ID = row_number()) %>%
dplyr::select(ID, MetaUniqueID_from, MetaUniqueID_to) %>%
pivot_longer(cols = c("MetaUniqueID_from", "MetaUniqueID_to"),
names_to = "Meta",
values_to = "MetaUniqueID") %>%
left_join(., cropped_metasites)
filt <- edges %>%
dplyr::select(!MetaUniqueID) %>%
pivot_wider(names_from = "Meta", values_from = c("MeanLat", "MeanLon")) %>%
filter(((-180 < MeanLon_MetaUniqueID_from) & (MeanLon_MetaUniqueID_from < 0)) & ((180 > MeanLon_MetaUniqueID_to) & (MeanLon_MetaUniqueID_to > 0))) %>%
filter(!ID %in% c(180)) # HACK. manually removed 180 because my brain is not working...
filt_trial1 <- filt %>%
dplyr::mutate(MeanLon_MetaUniqueID_to = -179.99) %>%
pivot_longer(cols = c("MeanLon_MetaUniqueID_from", "MeanLon_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLon") %>%
select(ID, MeanLon)
filt_trial2 <- filt %>%
pivot_longer(cols = c("MeanLat_MetaUniqueID_from", "MeanLat_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLat") %>%
select(MeanLat)
filt_trial3 <- filt %>%
dplyr::mutate(MeanLon_MetaUniqueID_from = 179.99) %>%
pivot_longer(cols = c("MeanLon_MetaUniqueID_from", "MeanLon_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLon") %>%
dplyr::mutate(ID = 500 + ID) %>% #another hack to change the IDs...
select(ID, MeanLon)
filt_trial4 <- filt %>%
pivot_longer(cols = c("MeanLat_MetaUniqueID_from", "MeanLat_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLat") %>%
select(MeanLat)
filt_trial_a <- bind_cols(filt_trial1, filt_trial2)
filt_trial_b <- bind_cols(filt_trial3, filt_trial4)
filt_trial <- bind_rows(filt_trial_a, filt_trial_b)
filt_string <- unique(filt$ID)
edges_sf <- edges %>%
filter(!ID %in% filt_string) %>%
dplyr::select(-Meta, -MetaUniqueID) %>%
bind_rows(., filt_trial) %>%
st_as_sf(coords = c("MeanLon", "MeanLat")) %>%
group_by(ID) %>%
summarize(ID = unique(ID)) %>%
#st_union() %>%
st_cast("LINESTRING")
st_crs(edges_sf) <- longlat
land <- rnaturalearth::ne_countries(scale = 'large', returnclass = 'sf') %>%
st_transform(crs = longlat)
RMU <- st_read("CM_RMU_20231020.shp")
plot(RMU)
RMU$species
RMU_Cm <- RMU [, 2,14]
RMU_Cm
View(RMU_Cm)
colors <- c("NES" = "#e3e418ff",
"BRE" = "#e3e418ff",
"FEE" = "#21908cff",
"STO" = "#21908cff",
"MIG" = "#253494",
"OBS" = "#253494",
"HOM" = "#253494")
mapcoords <- coord_fixed(xlim = c(-110, -60), ylim = c(0, 80))
Global_plot <- ggplot() +
geom_sf(data = land, fill = "white") +
geom_sf(data = RMU_Cm, fill = "#2a788eff", alpha = 0.18) +
geom_sf(data = nodes_sf, aes(color = type),  alpha = 0.6 , size = 2.6) +
scale_color_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
geom_sf(data = buffer_sf, aes(fill = type), alpha = 0.8, color = "black", size = 0.1) +
scale_fill_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
#geom_sf(data = edges_sf, linewidth = 0.3) +
theme(panel.background = element_rect(fill = "grey"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank() ,
legend.position = "none" ) #c(0.08, 0.25),
Global_plot
Global_plot <- ggplot() +
geom_sf(data = land, fill = "white") +
geom_sf(data = RMU_Cm, fill = "#2a788eff", alpha = 0.18) +
geom_sf(data = nodes_sf, aes(color = type),  alpha = 0.6 , size = 2.6) +
scale_color_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
geom_sf(data = buffer_sf, aes(fill = type), alpha = 0.8, color = "black", size = 0.1) +
scale_fill_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
geom_sf(data = edges_sf, linewidth = 0.3) +
theme(panel.background = element_rect(fill = "grey"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank() ,
legend.position = "none" ) #c(0.08, 0.25),
Global_plot
Global_plot <- ggplot() +
geom_sf(data = land, fill = "white") +
geom_sf(data = RMU_Cm, fill = "#2a788eff", alpha = 0.18) +
geom_sf(data = nodes_sf, aes(color = type),  alpha = 0.3 , size = 2.6) +
scale_color_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
geom_sf(data = buffer_sf, aes(fill = type), alpha = 0.8, color = "black", size = 0.1) +
scale_fill_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
geom_sf(data = edges_sf, linewidth = 0.3) +
theme(panel.background = element_rect(fill = "grey"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank() ,
legend.position = "none" ) #c(0.08, 0.25),
Global_plot
Map <- ne_countries(scale = "large",type = 'countries', returnclass = "sf")
Map_Car <- st_crop(Map , xmin = -100, xmax = -50, ymin = 5, ymax = 38)
library("sf")
library(sf)
Map_Car <- st_crop(Map , xmin = -100, xmax = -50, ymin = 5, ymax = 38)
blank2 <- ne_countries(scale = "large",type = 'countries', returnclass = "sf")
blank1 <- st_crop(blank2 , xmin = 99, xmax = 149, ymin = -8, ymax = 25)
class(blank2)
class(Map)
#Dictate size, location and font for text on the map
maptheme <- theme(text = element_text(family = "Roboto Condensed", size = 12),
plot.title = element_text(hjust = 0.025, vjust= -12),
plot.subtitle = element_text(size = 9, hjust = 0.028, vjust= -20),
plot.caption = element_text(hjust = 0.97, vjust= +11, size = 12),
legend.position = c(0.07,0.18), #MAY NEED ADJUSTMENT
legend.background=element_blank(),
legend.title = element_text(face = "bold"),
plot.margin = unit(c(0,0,0,0),"cm"))
#Internal information used to put the igraph structure in a ggplot via ggraph
node_pos <- nodes %>%
select(lon, lat) %>%
rename(x = lon, y = lat)   # node positions must be called x, y
lay <- create_layout(g, layout = node_pos)
#Choose colours for the various Activities... associate similar Activities to make the map easier to read
nodecolors <- c(
"SPA" = "#FB3C0E",
"NES" = "#FB3C0E",
"BRE" = "#FB3C0E",
"FEE" = "#73AB0D",
"STA" = "#73AB0D",
"STO" = "#73AB0D",
"MIG" = "#0984C1",
"WIN" = "#490530",
"NBR" = "#490530",
"OBS" = "#033B59")
mapcoords <- coord_fixed(xlim = c(-110, -60), ylim = c(0, 80))
#Dictate size, location and font for text on the map
maptheme <- theme(text = element_text(family = "Roboto Condensed", size = 12),
plot.title = element_text(hjust = 0.025, vjust= -12),
plot.subtitle = element_text(size = 9, hjust = 0.028, vjust= -20),
plot.caption = element_text(hjust = 0.97, vjust= +11, size = 12),
legend.position = c(0.07,0.18), #MAY NEED ADJUSTMENT
legend.background=element_blank(),
legend.title = element_text(face = "bold"),
plot.margin = unit(c(0,0,0,0),"cm"))
#Internal information used to put the igraph structure in a ggplot via ggraph
node_pos <- nodes %>%
select(lon, lat) %>%
rename(x = lon, y = lat)   # node positions must be called x, y
lay <- create_layout(g, layout = node_pos)
g <- graph_from_data_frame(regionaledges, directed = TRUE, vertices = regionalnodes)
####INDIAN OCEAN
regions <- c("W-IND","E-IND")
nodes$inregion <- lapply(nodes$Basin, function (i) any(i %in% regions))
regionalnodes <- nodes %>% subset(inregion == TRUE)
#lon > 30 & lon < 160 & lat < 30)
assert_that(nrow(regionalnodes) > 1) #stops the script if there are no nodes in this region... then I just scroll down to the region I need
regionaledges <- edges %>% subset(from %in% regionalnodes$id & to %in% regionalnodes$id)
## Caribbean & North Atlantic
# ORIGINAL   regions <- c("S-ATL","N-ATL")  ###
regions <- c("ATL")
## ORIGINAL  nodes$inregion <- lapply(nodes$RefOcean, function (i) any(i %in% regions)) ##
nodes$inregion <- lapply(nodes$Basin, function (i) any(i %in% regions))  ## Added Jaime
regionalnodes <- nodes %>% subset(lon < -50 & lon > -100) #subset(inregion == TRUE) #
#regionalnodes <- nodes %>% subset(lat < 30 & lat > 7) #subset(inregion == TRUE) #
regionalnodes <- nodes %>% subset(inregion == TRUE)
assert_that(nrow(regionalnodes) > 1)
regionaledges <- edges %>% subset(from %in% regionalnodes$id & to %in% regionalnodes$id)
longlat <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0" # set CRS
#Specify species
## ORIGINAL spp <- "THMAC"
spp <- "CHMY"
metasitesfile <- paste("C:/LEGOLAS/R/Ch1_Lit. Rev/Aggregation/",spp, "_metasites_testing_dcd.csv", sep="")
metaroutesfile <- paste("C:/LEGOLAS/R/Ch1_Lit. Rev/Aggregation/",spp, "_metaroutes_testing_dcd.csv", sep="")
# load georeferenced sites & routes
metasites <-  read.csv(metasitesfile, header = T, sep = ",", dec = ".", stringsAsFactors = F)
metaroutes <- read.csv(metaroutesfile, header=T, sep = ",", dec = ".", stringsAsFactors = F)
metasites <- read_csv(here(paste0(spp, "_metasites_testing_dcd.csv")))
metaroutes  <- read_csv(here(paste0(spp, "_metaroutes_testing_dcd.csv")))
sites <- read_csv(here(paste0("georeferenced_sites_CHMY_draft.csv")))
species <- metasites$CommonName[1]
activitytypes <- c("SPA", "NES", "BRE", "FEE", "STA", "STO",  "MIG", "WIN", "NBR", "OBS", "HOM")
fullactivity <- c("Spawning", "Nesting", "Breeding", "Feeding/Foraging", "Staging", "Stopover",  "Migrating", "Wintering", "Nonbreeding", "Observations", "Homerange")
## Usng the Metasites' file
nodes <- with(metasites, data.frame(id=MetaUniqueID, lon=MeanLon, lat=MeanLat, radius=MaxRadius, type = factor(BehaviorForSymbology, levels = activitytypes) , activities = SiteType, num = MinNumIndividuals, SiteLocation = MetaUniqueID, Basin = Basin))
# Create nodes sf object
nodes_sf <- nodes %>%
st_as_sf(coords = c("lon", "lat"))
# Create buffer sf object
buffer_sf <- st_buffer(nodes_sf, dist = nodes_sf$radius)
st_crs(buffer_sf) <- longlat
st_crs(nodes_sf) <- longlat
# Create edges
cropped_metasites <- metasites %>%
dplyr::select(MetaUniqueID, MeanLat, MeanLon)
edges <- metaroutes %>%
dplyr::mutate(ID = row_number()) %>%
dplyr::select(ID, MetaUniqueID_from, MetaUniqueID_to) %>%
pivot_longer(cols = c("MetaUniqueID_from", "MetaUniqueID_to"),
names_to = "Meta",
values_to = "MetaUniqueID") %>%
left_join(., cropped_metasites)
filt <- edges %>%
dplyr::select(!MetaUniqueID) %>%
pivot_wider(names_from = "Meta", values_from = c("MeanLat", "MeanLon")) %>%
filter(((-180 < MeanLon_MetaUniqueID_from) & (MeanLon_MetaUniqueID_from < 0)) & ((180 > MeanLon_MetaUniqueID_to) & (MeanLon_MetaUniqueID_to > 0))) %>%
filter(!ID %in% c(180)) # HACK. manually removed 180 because my brain is not working...
filt_string <- unique(filt$ID)
edges_sf <- edges %>%
filter(!ID %in% filt_string) %>%
dplyr::select(-Meta, -MetaUniqueID) %>%
bind_rows(., filt_trial) %>%
st_as_sf(coords = c("MeanLon", "MeanLat")) %>%
group_by(ID) %>%
summarize(ID = unique(ID)) %>%
#st_union() %>%
st_cast("LINESTRING")
longlat <- "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0" # set CRS
#Specify species
## ORIGINAL spp <- "THMAC"
spp <- "CHMY"
metasitesfile <- paste("C:/LEGOLAS/R/Ch1_Lit. Rev/Aggregation/",spp, "_metasites_testing_dcd.csv", sep="")
metaroutesfile <- paste("C:/LEGOLAS/R/Ch1_Lit. Rev/Aggregation/",spp, "_metaroutes_testing_dcd.csv", sep="")
# load georeferenced sites & routes
metasites <-  read.csv(metasitesfile, header = T, sep = ",", dec = ".", stringsAsFactors = F)
metaroutes <- read.csv(metaroutesfile, header=T, sep = ",", dec = ".", stringsAsFactors = F)
metasites <- read_csv(here(paste0(spp, "_metasites_testing_dcd.csv")))
metaroutes  <- read_csv(here(paste0(spp, "_metaroutes_testing_dcd.csv")))
sites <- read_csv(here(paste0("georeferenced_sites_CHMY_draft.csv")))
species <- metasites$CommonName[1]
activitytypes <- c("SPA", "NES", "BRE", "FEE", "STA", "STO",  "MIG", "WIN", "NBR", "OBS", "HOM")
fullactivity <- c("Spawning", "Nesting", "Breeding", "Feeding/Foraging", "Staging", "Stopover",  "Migrating", "Wintering", "Nonbreeding", "Observations", "Homerange")
## Usng the Metasites' file
nodes <- with(metasites, data.frame(id=MetaUniqueID, lon=MeanLon, lat=MeanLat, radius=MaxRadius, type = factor(BehaviorForSymbology, levels = activitytypes) , activities = SiteType, num = MinNumIndividuals, SiteLocation = MetaUniqueID, Basin = Basin))
# Create nodes sf object
nodes_sf <- nodes %>%
st_as_sf(coords = c("lon", "lat"))
# Create buffer sf object
buffer_sf <- st_buffer(nodes_sf, dist = nodes_sf$radius)
st_crs(buffer_sf) <- longlat
st_crs(nodes_sf) <- longlat
# Create edges
cropped_metasites <- metasites %>%
dplyr::select(MetaUniqueID, MeanLat, MeanLon)
edges <- metaroutes %>%
dplyr::mutate(ID = row_number()) %>%
dplyr::select(ID, MetaUniqueID_from, MetaUniqueID_to) %>%
pivot_longer(cols = c("MetaUniqueID_from", "MetaUniqueID_to"),
names_to = "Meta",
values_to = "MetaUniqueID") %>%
left_join(., cropped_metasites)
filt <- edges %>%
dplyr::select(!MetaUniqueID) %>%
pivot_wider(names_from = "Meta", values_from = c("MeanLat", "MeanLon")) %>%
filter(((-180 < MeanLon_MetaUniqueID_from) & (MeanLon_MetaUniqueID_from < 0)) & ((180 > MeanLon_MetaUniqueID_to) & (MeanLon_MetaUniqueID_to > 0))) %>%
filter(!ID %in% c(180)) # HACK. manually removed 180 because my brain is not working...
filt_trial1 <- filt %>%
dplyr::mutate(MeanLon_MetaUniqueID_to = -179.99) %>%
pivot_longer(cols = c("MeanLon_MetaUniqueID_from", "MeanLon_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLon") %>%
select(ID, MeanLon)
filt_trial2 <- filt %>%
pivot_longer(cols = c("MeanLat_MetaUniqueID_from", "MeanLat_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLat") %>%
select(MeanLat)
filt_trial3 <- filt %>%
dplyr::mutate(MeanLon_MetaUniqueID_from = 179.99) %>%
pivot_longer(cols = c("MeanLon_MetaUniqueID_from", "MeanLon_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLon") %>%
dplyr::mutate(ID = 500 + ID) %>% #another hack to change the IDs...
select(ID, MeanLon)
filt_trial4 <- filt %>%
pivot_longer(cols = c("MeanLat_MetaUniqueID_from", "MeanLat_MetaUniqueID_to"), names_to = "filler1",
values_to = "MeanLat") %>%
select(MeanLat)
filt_trial_a <- bind_cols(filt_trial1, filt_trial2)
filt_trial_b <- bind_cols(filt_trial3, filt_trial4)
filt_trial <- bind_rows(filt_trial_a, filt_trial_b)
filt_string <- unique(filt$ID)
edges_sf <- edges %>%
filter(!ID %in% filt_string) %>%
dplyr::select(-Meta, -MetaUniqueID) %>%
bind_rows(., filt_trial) %>%
st_as_sf(coords = c("MeanLon", "MeanLat")) %>%
group_by(ID) %>%
summarize(ID = unique(ID)) %>%
#st_union() %>%
st_cast("LINESTRING")
st_crs(edges_sf) <- longlat
land <- rnaturalearth::ne_countries(scale = 'large', returnclass = 'sf') %>%
st_transform(crs = longlat)
RMU <- st_read("CM_RMU_20231020.shp")
RMU$species
RMU_Cm <- RMU [, 2,14]
RMU_Cm
colors <- c("NES" = "#e3e418ff",
"BRE" = "#e3e418ff",
"FEE" = "#21908cff",
"STO" = "#21908cff",
"MIG" = "#253494",
"OBS" = "#253494",
"HOM" = "#253494")
mapcoords <- coord_fixed(xlim = c(-110, -60), ylim = c(0, 80))
Global_plot <- ggplot() +
geom_sf(data = land, fill = "white") +
geom_sf(data = RMU_Cm, fill = "#2a788eff", alpha = 0.18) +
geom_sf(data = nodes_sf, aes(color = type),  alpha = 0.6 , size = 2.6) +
scale_color_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
geom_sf(data = buffer_sf, aes(fill = type), alpha = 0.8, color = "black", size = 0.1) +
scale_fill_manual(name = "Node type", values = colors) +
guides(color = "none", size = "none") +
geom_sf(data = edges_sf, linewidth = 0.3) +
theme(panel.background = element_rect(fill = "grey"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank() ,
legend.position = "none" ) #c(0.08, 0.25),
Global_plot
#Generate a graph structure g with the igraph library. This is especially necessary for fast calculation of the degree or other properties of each node later.
g <- graph_from_data_frame(edges, directed = TRUE, vertices = nodes)
maptheme <- theme(text = element_text(family = "Roboto Condensed"),
plot.title = element_text(size = 14, hjust = 0.035, vjust= -15),
plot.subtitle = element_text(size = 11, hjust = 0.085, vjust= -20),
plot.caption = element_text(hjust = 0.99, vjust= +15),
legend.position = c(0.08,0.12),
legend.background=element_blank(),
legend.title = element_text(face = "bold"),
plot.margin = unit(c(0,0,0,0),"cm"))
node_pos <- nodes %>%
select(lon, lat) %>%
rename(x = lon, y = lat)   # node positions must be called x, y
lay <- create_layout(g, layout = node_pos)
assert_that(nrow(lay) == nrow(nodes))
#We pass the layout lay and use ggraph's geoms geom_edge_arc and geom_node_point for plotting:
zoomed_plot <- ggraph(lay) + country_shapes + mapcoords +
geom_node_circle(aes(r = radius, fill = type), color = "gray", alpha = 0.25) + #transparent
scale_fill_manual(values = nodecolors, breaks =  activitytypes, name = "Node Type") + #labels = fullactivity,
# geom_node_text(aes(label = SiteLocation), repel = TRUE, size = 3, #activities
#                color = "black", family = "Roboto Condensed Light") +
# geom_edge_arc(aes(edge_width = weight), strength = 0.25, alpha = 0.4) +
geom_edge_link(aes(edge_width = weight), arrow = arrow(length = unit(3, 'mm'), angle = 20), end_cap = circle(1, 'mm'), alpha = 0.4) +
scale_edge_width_continuous(range = c(0.5, 2), guide = FALSE) +
labs(x = NULL,
y = NULL,
title = paste(c("Connectivity for ", species), collapse=""),
subtitle = "Derived from publications utilising telemetry data between 1990 & 2015",
caption = "Migratory Connectivity in the Ocean (MiCO) System. 2020.") +
maptheme
zoomed_plot
## Europe & Med
regions <- c("MED")
nodes$inregion <- lapply(nodes$RefOcean, function (i) any(i %in% regions))
## South Atlantic
regions <- c("S-ATL")
nodes$inregion <- lapply(nodes$RefOcean, function (i) any(i %in% regions))
regionalnodes <- nodes %>% subset(inregion == TRUE)
regionaledges <- edges %>% subset(from %in% regionalnodes$id & to %in% regionalnodes$id)
#Generate a graph structure g with the igraph library. This is especially necessary for fast calculation of the degree or other properties of each node later.
g <- graph_from_data_frame(regionaledges, directed = TRUE, vertices = regionalnodes)
country_shapes <- geom_polygon(aes(x = long, y = lat, group = group), data = map_data('world'),
fill = "#FFFFFF", color = "#DDDDDD", size = 0.15)
mapcoords <- coord_fixed(xlim = c(min(regionalnodes$lon) - 20, max(regionalnodes$lon) + 10),
ylim = c(min(regionalnodes$lat) -  10, max(regionalnodes$lat) + 10))
maptheme <- theme(text = element_text(family = "Roboto Condensed"),
plot.title = element_text(size = 14, hjust = 0.018, vjust= -15),
plot.subtitle = element_text(size = 11, hjust = 0.018, vjust= -20),
plot.caption = element_text(hjust = 0.99, vjust= +15),
legend.position = c(0.09,0.10),
legend.background=element_blank(),
legend.title = element_text(face = "bold"),
plot.margin = unit(c(0,0,0,0),"cm"))
